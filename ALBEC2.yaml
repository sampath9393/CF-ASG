AWSTemplateFormatVersion: 2010-09-09
Description: EC2 with ALB

Parameters:
  VPCID:
    Description: A VPC ID
    Type: String
  PublicSubnet1:
    Description: public subnet 1 
    Type: String
  PublicSubnet2:
    Description: public subnet 2
    Type: String

  PrivateSubnet1:
    Description: private subnet 1 
    Type: String
  PrivateSubnet2:
    Description: private subnet 2 
    Type: String
  
  ServerInstanceType:
    ConstraintDescription: Select instance type.
    Default: t2.micro
    Description: instance type
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    

  EnvironmentType: 
      Description: The environment type
      Type: String
      Default: dev
      AllowedValues: 
        - dev
        - qa
        - prod

  KeyPairName: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be a valid Key Pair

  ALBAccessCIDR:
    Description: ALB access CIDR
    Type: String
    Default: 0.0.0.0/0
  
  



Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: "EC2 Security Group"
        - Key: business_unit
          Value: "Core"

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref ALBAccessCIDR
        
      Tags:
        - Key: Name
          Value: "RACALB_SECURITY_GROUP"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: '80'
      Protocol: 'HTTP'
      VpcId: !Ref VPCID
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: RAC_TARGET_GROUP
  
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-087c17d1fe0178315
      InstanceType: !Ref ServerInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          service tomcat8 start
          sudo yum update -y
          sudo yum install -y httpd.x86_64
          sudo systemctl start httpd.service
          sudo systemctl enable httpd.service
          sudo echo "HELLO RAC from $(hostname -f)" > /var/www/html/index.html
  
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfig
      TargetGroupARNs:
        - !Ref TargetGroup
      MaxSize: 2
      MinSize: 1
      Tags:
          - Key: Name
            Value: POC
            PropagateAtLaunch: True
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True
  
  AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoscalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1

  AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoscalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1
  
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions: [!Ref AppScaleUpPolicy]
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoscalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions: [!Ref AppScaleDownPolicy]
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoscalingGroup
      ComparisonOperator: LessThanThreshold
  
  WebAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        
      Tags:
        - Key: Name
          Value: "RAC_ALB"
      Type: application
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - WebAppALB
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: WebAppALB
      Port: '80'
      Protocol: HTTP

  

  
  

  

  